// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package users

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UserTypeEnum string

const (
	UserTypeEnumProcurer UserTypeEnum = "procurer"
	UserTypeEnumApprover UserTypeEnum = "approver"
	UserTypeEnumSupplier UserTypeEnum = "supplier"
)

func (e *UserTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserTypeEnum(s)
	case string:
		*e = UserTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserTypeEnum: %T", src)
	}
	return nil
}

type NullUserTypeEnum struct {
	UserTypeEnum UserTypeEnum `json:"user_type_enum"`
	Valid        bool         `json:"valid"` // Valid is true if UserTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserTypeEnum), nil
}

type BusinessParticular struct {
	RegBusinessName    string `json:"reg_business_name"`
	BrelaRegNumber     string `json:"brela_reg_number"`
	UserID             int32  `json:"user_id"`
	PoBox              string `json:"po_box"`
	OccupationLocation string `json:"occupation_location"`
	Country            string `json:"country"`
	Region             string `json:"region"`
	Tin                string `json:"tin"`
	FirstName          string `json:"first_name"`
	LastName           string `json:"last_name"`
	Contact            string `json:"contact"`
	Website            string `json:"website"`
}

type PurchaseRequisition struct {
	RequisitionID uuid.UUID `json:"requisition_id"`
	RequesterID   string    `json:"requester_id"`
	Description   string    `json:"description"`
	Title         string    `json:"title"`
	Status        string    `json:"status"`
	DateSubmitted time.Time `json:"date_submitted"`
	DateApproved  time.Time `json:"date_approved"`
	DateRejected  time.Time `json:"date_rejected"`
}

type PurchasingAccount struct {
	AccountName   pgtype.Text `json:"account_name"`
	AccountNumber int64       `json:"account_number"`
}

type QuotationRequest struct {
	ProposalRequestID int64     `json:"proposal_request_id"`
	RequisitionID     uuid.UUID `json:"requisition_id"`
	SupplierID        uuid.UUID `json:"supplier_id"`
	Status            string    `json:"status"`
	DateSubmitted     time.Time `json:"date_submitted"`
	DateApproved      time.Time `json:"date_approved"`
	DateRejected      time.Time `json:"date_rejected"`
}

type Role struct {
	RoleID   int32        `json:"role_id"`
	RoleName UserTypeEnum `json:"role_name"`
}

type Supplier struct {
	SupplierID    uuid.UUID `json:"supplier_id"`
	SupplierName  string    `json:"supplier_name"`
	ContactPerson string    `json:"contact_person"`
	ContactMail   string    `json:"contact_mail"`
	SupplierType  string    `json:"supplier_type"`
}

type User struct {
	UserID    string    `json:"user_id"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Email     string    `json:"email"`
	RoleID    int32     `json:"role_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
