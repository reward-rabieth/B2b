// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package users

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Usertypeenum string

const (
	UsertypeenumProcurer Usertypeenum = "procurer"
	UsertypeenumApprover Usertypeenum = "approver"
	UsertypeenumSupplier Usertypeenum = "supplier"
)

func (e *Usertypeenum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Usertypeenum(s)
	case string:
		*e = Usertypeenum(s)
	default:
		return fmt.Errorf("unsupported scan type for Usertypeenum: %T", src)
	}
	return nil
}

type NullUsertypeenum struct {
	Usertypeenum Usertypeenum `json:"usertypeenum"`
	Valid        bool         `json:"valid"` // Valid is true if Usertypeenum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsertypeenum) Scan(value interface{}) error {
	if value == nil {
		ns.Usertypeenum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Usertypeenum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsertypeenum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Usertypeenum), nil
}

type Purchaserequisition struct {
	Requisitionid string             `json:"requisitionid"`
	Requesterid   string             `json:"requesterid"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	Status        string             `json:"status"`
	Datesubmitted pgtype.Timestamptz `json:"datesubmitted"`
	Dateapproved  pgtype.Timestamptz `json:"dateapproved"`
	Daterejected  pgtype.Timestamptz `json:"daterejected"`
}

type QuotationRequest struct {
	ProposalRequestID pgtype.Int4        `json:"ProposalRequestID"`
	RequisitionID     pgtype.Text        `json:"RequisitionID"`
	VendorID          pgtype.Int4        `json:"VendorID"`
	Status            pgtype.Text        `json:"Status"`
	DateSubmitted     pgtype.Timestamptz `json:"DateSubmitted"`
	DateApproved      pgtype.Timestamptz `json:"DateApproved"`
	DateRejected      pgtype.Timestamptz `json:"DateRejected"`
}

type User struct {
	Userid     string             `json:"userid"`
	Username   string             `json:"username"`
	Password   string             `json:"password"`
	Email      string             `json:"email"`
	Usertypefk int32              `json:"usertypefk"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type UserType struct {
	UserTypePK int32        `json:"UserTypePK"`
	UserType   Usertypeenum `json:"UserType"`
}

type Vendor struct {
	VendorID      pgtype.Int4 `json:"VendorID"`
	VendorName    pgtype.Text `json:"VendorName"`
	ContactPerson pgtype.Text `json:"ContactPerson"`
	ContactEmail  pgtype.Text `json:"ContactEmail"`
	VendorType    pgtype.Text `json:"VendorType"`
}
