// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: supplier.sql

package users

import (
	"context"

	"github.com/google/uuid"
)

const createSupplier = `-- name: CreateSupplier :many
INSERT INTO suppliers (
                    supplier_id, supplier_name, contact_person, contact_mail, supplier_type
) VALUES ($1,$2,$3,$4,$5)
RETURNING supplier_id, supplier_name, contact_person, contact_mail, supplier_type
`

type CreateSupplierParams struct {
	SupplierID    uuid.UUID `json:"supplier_id"`
	SupplierName  string    `json:"supplier_name"`
	ContactPerson string    `json:"contact_person"`
	ContactMail   string    `json:"contact_mail"`
	SupplierType  string    `json:"supplier_type"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, createSupplier,
		arg.SupplierID,
		arg.SupplierName,
		arg.ContactPerson,
		arg.ContactMail,
		arg.SupplierType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.SupplierName,
			&i.ContactPerson,
			&i.ContactMail,
			&i.SupplierType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSupplier = `-- name: ListSupplier :many
SELECT supplier_id, supplier_name, contact_person, contact_mail, supplier_type FROM  suppliers
ORDER BY supplier_name
`

func (q *Queries) ListSupplier(ctx context.Context) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSupplier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.SupplierName,
			&i.ContactPerson,
			&i.ContactMail,
			&i.SupplierType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
